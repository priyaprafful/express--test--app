{"version":3,"file":"index.cjs","sources":["../../src/asDate.ts","../../src/graphql/asLink.ts","../../src/documentToLinkField.ts","../../src/asLink.ts","../../src/lib/serializerHelpers.ts","../../src/asHTML.ts"],"sourcesContent":["import type { DateField, TimestampField } from \"@prismicio/types\";\n\n/**\n * Transforms a date or timestamp field into a JavaScript Date object\n *\n * @param dateOrTimestampField - A date or timestamp field from Prismic\n *\n * @returns A Date object, null if provided date is falsy\n * @see Templating date field from Prismic {@link https://prismic.io/docs/technologies/templating-date-field-javascript}\n */\nexport const asDate = (\n\tdateOrTimestampField: DateField | TimestampField,\n): Date | null => {\n\tif (!dateOrTimestampField) {\n\t\treturn null;\n\t}\n\n\t// If field is a timestamp field...\n\tif (dateOrTimestampField.length === 24) {\n\t\t/**\n\t\t * Converts basic ISO 8601 to ECMAScript simplified ISO 8601 format for\n\t\t * browser compatibility issues\n\t\t *\n\t\t * From: YYYY-MM-DDTHH:mm:ssZ To: YYYY-MM-DDTHH:mm:ss.sssZ\n\t\t *\n\t\t * @see MDN documentation: {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#timestamp_string}\n\t\t * @see ECMAScript 2020 language specification: {@link https://262.ecma-international.org/11.0/#sec-date-time-string-format}\n\t\t * @see Related forum issue: {@link https://community.prismic.io/t/prismics-date-api/2520}\n\t\t * @see Regex101 expression: {@link https://regex101.com/r/jxyETT/1}\n\t\t */\n\t\treturn new Date(\n\t\t\tdateOrTimestampField.replace(/(\\+|-)(\\d{2})(\\d{2})$/, \".000$1$2:$3\"),\n\t\t);\n\t} else {\n\t\t// ...else field is a date field\n\t\treturn new Date(dateOrTimestampField);\n\t}\n};\n","// TODO: Migrate once fixed https://github.com/microsoft/TypeScript/issues/33079\nimport {\n\tFilledMinimalLinkToDocumentField,\n\tLinkField,\n\tLinkType,\n} from \"@prismicio/types/dist/graphql\";\nimport { LinkResolverFunction } from \"./types\";\n\n/**\n * Resolves any type of link field to a URL\n *\n * @typeParam LinkResolverLinkToDocumentField - Link resolver link to document field type\n * @typeParam LinkResolverFunctionReturnType - Link resolver function return type\n * @param linkField - Any kind of link field to resolve\n * @param linkResolver - A link resolver function, without it you're expected to\n *   use the `routes` from the API\n *\n * @returns Resolved URL, null if provided link is empty\n * @experimental\n * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}\n * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}\n */\nexport const asLink = <\n\tLinkResolverLinkToDocumentField extends FilledMinimalLinkToDocumentField = FilledMinimalLinkToDocumentField,\n\tLinkResolverFunctionReturnType = string,\n>(\n\tlinkField: LinkField<LinkResolverLinkToDocumentField>,\n\tlinkResolver?: LinkResolverFunction<\n\t\tLinkResolverLinkToDocumentField,\n\t\tLinkResolverFunctionReturnType\n\t> | null,\n):\n\t| ReturnType<\n\t\t\tLinkResolverFunction<\n\t\t\t\tLinkResolverLinkToDocumentField,\n\t\t\t\tLinkResolverFunctionReturnType\n\t\t\t>\n\t  >\n\t| string\n\t| null => {\n\tif (!linkField) {\n\t\treturn null;\n\t}\n\n\tif (\"url\" in linkField) {\n\t\treturn linkField.url;\n\t} else if (linkField._linkType === LinkType.Document) {\n\t\treturn linkResolver ? linkResolver(linkField) : null;\n\t} else {\n\t\treturn null;\n\t}\n};\n","import {\n\tFilledLinkToDocumentField,\n\tLinkType,\n\tPrismicDocument,\n} from \"@prismicio/types\";\n\ntype SetOptional<T, Keys extends keyof T> = Omit<T, Keys> &\n\tPartial<Pick<T, Keys>>;\n\n/**\n * Converts a document into a link field, this is useful when crawling the API\n * for document links\n *\n * @typeParam TDocument - Specific interface of the provided document\n * @param prismicDocument - A document coming from Prismic\n *\n * @returns The equivalent link field to use with `asLink()`\n * @internal\n */\nexport const documentToLinkField = <\n\tTDocument extends SetOptional<PrismicDocument, \"slugs\">,\n>(\n\tprismicDocument: TDocument,\n): FilledLinkToDocumentField<\n\tTDocument[\"type\"],\n\tTDocument[\"lang\"],\n\tTDocument[\"data\"]\n> => {\n\treturn {\n\t\tlink_type: LinkType.Document,\n\t\tid: prismicDocument.id,\n\t\tuid: prismicDocument.uid ?? undefined,\n\t\ttype: prismicDocument.type,\n\t\ttags: prismicDocument.tags,\n\t\tlang: prismicDocument.lang,\n\t\turl: prismicDocument.url ?? undefined,\n\t\tslug: prismicDocument.slugs?.[0], // Slug field is not available with GraphQl\n\t\t// The REST API does not include a `data` property if the data object is empty.\n\t\t...(Object.keys(prismicDocument.data).length > 0\n\t\t\t? { data: prismicDocument.data }\n\t\t\t: {}),\n\t};\n};\n","import { LinkField, LinkType, PrismicDocument } from \"@prismicio/types\";\nimport { documentToLinkField } from \"./documentToLinkField\";\nimport { LinkResolverFunction } from \"./types\";\n\n/**\n * Resolves any type of link field or document to a URL\n *\n * @typeParam LinkResolverFunctionReturnType - Link resolver function return type\n * @param linkFieldOrDocument - Any kind of link field or a document to resolve\n * @param linkResolver - An optional link resolver function, without it you're\n *   expected to use the `routes` options from the API\n *\n * @returns Resolved URL, null if provided link is empty\n * @see Prismic link resolver documentation: {@link https://prismic.io/docs/technologies/link-resolver-javascript}\n * @see Prismic API `routes` options documentation: {@link https://prismic.io/docs/technologies/route-resolver-nuxtjs}\n */\nexport const asLink = <LinkResolverFunctionReturnType = string>(\n\tlinkFieldOrDocument: LinkField | PrismicDocument,\n\tlinkResolver?: LinkResolverFunction<LinkResolverFunctionReturnType> | null,\n): LinkResolverFunctionReturnType | string | null => {\n\tif (!linkFieldOrDocument) {\n\t\treturn null;\n\t}\n\n\t// Converts document to link field if needed\n\tconst linkField = (\n\t\t\"link_type\" in linkFieldOrDocument\n\t\t\t? linkFieldOrDocument\n\t\t\t: documentToLinkField(linkFieldOrDocument)\n\t) as LinkField;\n\n\tswitch (linkField.link_type) {\n\t\tcase LinkType.Media:\n\t\tcase LinkType.Web:\n\t\t\treturn \"url\" in linkField ? linkField.url : null;\n\n\t\tcase LinkType.Document: {\n\t\t\tif (\"id\" in linkField && linkResolver) {\n\t\t\t\t// When using Link Resolver...\n\t\t\t\tconst resolvedURL = linkResolver(linkField);\n\n\t\t\t\tif (resolvedURL != null) {\n\t\t\t\t\treturn resolvedURL;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\"url\" in linkField && linkField.url) {\n\t\t\t\t// When using Route Resolver...\n\t\t\t\treturn linkField.url;\n\t\t\t}\n\n\t\t\t// When empty or Link Resolver and Route Resolver are not used...\n\t\t\treturn null;\n\t\t}\n\n\t\tcase LinkType.Any:\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n","import escapeHtml from \"escape-html\";\nimport {\n\tRTBlockNode,\n\tRTInlineNode,\n\tRTPreformattedNode,\n\tRTImageNode,\n\tRTEmbedNode,\n\tRTLinkNode,\n\tLinkType,\n\tRichTextNodeType,\n} from \"@prismicio/types\";\n\nimport { asLink } from \"../asLink\";\nimport { LinkResolverFunction } from \"../types\";\n\nexport const getLabel = (node: RTBlockNode | RTInlineNode): string => {\n\treturn \"data\" in node && \"label\" in node.data\n\t\t? ` class=\"${node.data.label}\"`\n\t\t: \"\";\n};\n\nexport const serializeStandardTag = (\n\ttag: string,\n\tnode: RTBlockNode | RTInlineNode,\n\tchildren: string[],\n): string => {\n\treturn `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\n\nexport const serializePreFormatted = (node: RTPreformattedNode): string => {\n\treturn `<pre${getLabel(node)}>${escapeHtml(node.text)}</pre>`;\n};\n\nexport const serializeImage = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n\tnode: RTImageNode,\n): string => {\n\tlet imageTag = `<img src=\"${node.url}\" alt=\"${escapeHtml(node.alt)}\"${\n\t\tnode.copyright ? ` copyright=\"${escapeHtml(node.copyright)}\"` : \"\"\n\t} />`;\n\n\t// If the image has a link, we wrap it with an anchor tag\n\tif (node.linkTo) {\n\t\timageTag = serializeHyperlink(\n\t\t\tlinkResolver,\n\t\t\t{\n\t\t\t\ttype: RichTextNodeType.hyperlink,\n\t\t\t\tdata: node.linkTo,\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0,\n\t\t\t},\n\t\t\t[imageTag],\n\t\t);\n\t}\n\n\treturn `<p class=\"block-img\">${imageTag}</p>`;\n};\n\nexport const serializeEmbed = (node: RTEmbedNode): string => {\n\treturn `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${\n\t\tnode.oembed.type\n\t}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${\n\t\tnode.oembed.html\n\t}</div>`;\n};\n\nexport const serializeHyperlink = (\n\tlinkResolver: LinkResolverFunction | undefined | null,\n\tnode: RTLinkNode,\n\tchildren: string[],\n): string => {\n\tswitch (node.data.link_type) {\n\t\tcase LinkType.Web: {\n\t\t\treturn `<a href=\"${escapeHtml(node.data.url)}\" target=\"${\n\t\t\t\tnode.data.target\n\t\t\t}\" rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Document: {\n\t\t\treturn `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(\n\t\t\t\tnode,\n\t\t\t)}>${children.join(\"\")}</a>`;\n\t\t}\n\n\t\tcase LinkType.Media: {\n\t\t\treturn `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\n\t\t\t\t\"\",\n\t\t\t)}</a>`;\n\t\t}\n\t}\n};\n\nexport const serializeSpan = (content?: string): string => {\n\treturn content ? escapeHtml(content).replace(/\\n/g, \"<br />\") : \"\";\n};\n","import {\n\tserialize,\n\tElement,\n\tcomposeSerializers,\n\tRichTextFunctionSerializer,\n\tRichTextMapSerializer,\n\twrapMapSerializer,\n} from \"@prismicio/richtext\";\nimport { RichTextField } from \"@prismicio/types\";\n\nimport {\n\tserializeStandardTag,\n\tserializePreFormatted,\n\tserializeImage,\n\tserializeEmbed,\n\tserializeHyperlink,\n\tserializeSpan,\n} from \"./lib/serializerHelpers\";\nimport {\n\tHTMLFunctionSerializer,\n\tHTMLMapSerializer,\n\tLinkResolverFunction,\n} from \"./types\";\n\n/**\n * Creates a default HTML serializer with a given Link Resolver providing\n * sensible and safe defaults for every node type\n *\n * @internal\n */\nconst createDefaultHTMLSerializer = (\n\tlinkResolver: LinkResolverFunction<string> | undefined | null,\n): RichTextFunctionSerializer<string> => {\n\treturn (_type, node, text, children, _key) => {\n\t\tswitch (node.type) {\n\t\t\tcase Element.heading1:\n\t\t\t\treturn serializeStandardTag(\"h1\", node, children);\n\t\t\tcase Element.heading2:\n\t\t\t\treturn serializeStandardTag(\"h2\", node, children);\n\t\t\tcase Element.heading3:\n\t\t\t\treturn serializeStandardTag(\"h3\", node, children);\n\t\t\tcase Element.heading4:\n\t\t\t\treturn serializeStandardTag(\"h4\", node, children);\n\t\t\tcase Element.heading5:\n\t\t\t\treturn serializeStandardTag(\"h5\", node, children);\n\t\t\tcase Element.heading6:\n\t\t\t\treturn serializeStandardTag(\"h6\", node, children);\n\t\t\tcase Element.paragraph:\n\t\t\t\treturn serializeStandardTag(\"p\", node, children);\n\t\t\tcase Element.preformatted:\n\t\t\t\treturn serializePreFormatted(node);\n\t\t\tcase Element.strong:\n\t\t\t\treturn serializeStandardTag(\"strong\", node, children);\n\t\t\tcase Element.em:\n\t\t\t\treturn serializeStandardTag(\"em\", node, children);\n\t\t\tcase Element.listItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.oListItem:\n\t\t\t\treturn serializeStandardTag(\"li\", node, children);\n\t\t\tcase Element.list:\n\t\t\t\treturn serializeStandardTag(\"ul\", node, children);\n\t\t\tcase Element.oList:\n\t\t\t\treturn serializeStandardTag(\"ol\", node, children);\n\t\t\tcase Element.image:\n\t\t\t\treturn serializeImage(linkResolver, node);\n\t\t\tcase Element.embed:\n\t\t\t\treturn serializeEmbed(node);\n\t\t\tcase Element.hyperlink:\n\t\t\t\treturn serializeHyperlink(linkResolver, node, children);\n\t\t\tcase Element.label:\n\t\t\t\treturn serializeStandardTag(\"span\", node, children);\n\t\t\tcase Element.span:\n\t\t\tdefault:\n\t\t\t\treturn serializeSpan(text);\n\t\t}\n\t};\n};\n\n/**\n * Wraps a map serializer into a regular function serializer. The given map\n * serializer should accept children as a string, not as an array of strings\n * like `@prismicio/richtext`'s `wrapMapSerializer`.\n *\n * @param mapSerializer - Map serializer to wrap\n *\n * @returns A regular function serializer\n */\nconst wrapMapSerializerWithStringChildren = (\n\tmapSerializer: HTMLMapSerializer,\n): RichTextFunctionSerializer<string> => {\n\tconst modifiedMapSerializer = {} as RichTextMapSerializer<string>;\n\n\tfor (const tag in mapSerializer) {\n\t\tconst tagSerializer = mapSerializer[tag as keyof typeof mapSerializer];\n\n\t\tif (tagSerializer) {\n\t\t\tmodifiedMapSerializer[tag as keyof typeof mapSerializer] = (payload) => {\n\t\t\t\treturn tagSerializer({\n\t\t\t\t\t...payload,\n\t\t\t\t\t// @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n\t\t\t\t\tchildren: payload.children.join(\"\"),\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\n\treturn wrapMapSerializer(modifiedMapSerializer);\n};\n\n/**\n * Serializes a rich text or title field to an HTML string\n *\n * @param richTextField - A rich text or title field from Prismic\n * @param linkResolver - An optional link resolver function to resolve links,\n *   without it you're expected to use the `routes` options from the API\n * @param htmlSerializer - An optional serializer, unhandled cases will fallback\n *   to the default serializer\n *\n * @returns HTML equivalent of the provided rich text or title field\n * @see Templating rich text and title fields from Prismic {@link https://prismic.io/docs/technologies/templating-rich-text-and-title-fields-javascript}\n */\nexport const asHTML = (\n\trichTextField: RichTextField | null | undefined,\n\tlinkResolver?: LinkResolverFunction<string> | null,\n\thtmlSerializer?: HTMLFunctionSerializer | HTMLMapSerializer | null,\n): string | null => {\n\tif (richTextField) {\n\t\tlet serializer: RichTextFunctionSerializer<string>;\n\t\tif (htmlSerializer) {\n\t\t\tserializer = composeSerializers(\n\t\t\t\ttypeof htmlSerializer === \"object\"\n\t\t\t\t\t? wrapMapSerializerWithStringChildren(htmlSerializer)\n\t\t\t\t\t: (type, node, text, children, key) =>\n\t\t\t\t\t\t\thtmlSerializer(type, node, text, children.join(\"\"), key),\n\t\t\t\tcreateDefaultHTMLSerializer(linkResolver),\n\t\t\t);\n\t\t} else {\n\t\t\tserializer = createDefaultHTMLSerializer(linkResolver);\n\t\t}\n\n\t\treturn serialize(richTextField, serializer).join(\"\");\n\t} else {\n\t\treturn null;\n\t}\n};\n"],"names":["asLink","LinkType","escapeHtml","RichTextNodeType","Element","wrapMapSerializer","composeSerializers","serialize"],"mappings":"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"}